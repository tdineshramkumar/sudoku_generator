"""
    Run this script to group the problems and solutions generated by the main.py script into a pdf.
"""

from fpdf import FPDF
import os

pdf = FPDF(orientation='P', unit='pt', format='A4')
pdf.set_author('dinesh')
pdf.set_title('python sudoku generator')
""" Get all sudoku problem images from the problems/ directory """
files = list(map(lambda fn: 'problems/' + fn, sorted(os.listdir('problems/'),
                                                     key=lambda name: int(name.split('.')[0]))))

""" Draw the title at the top of the first page """
pdf.add_page()
pdf.set_xy(0, 0)
pdf.set_font('Arial', 'B', 90)
pdf.cell(595, 250, "SUDOKU", 1, 0, 'C')
pdf.set_xy(300, 150)
pdf.set_font('Arial', 'B', 20)
pdf.cell(295, 30, "Â©PySudokuGenerator", 0, 0, 'C')
pdf.set_xy(300, 180)
pdf.set_font('Arial', 'B', 10)
pdf.cell(295, 10, "AUTHOR: DINESH RAM KUMAR", 0, 0, 'C')

""" Draw the sudoku problems into the PDF 6 per page """
# Set the sudoku puzzle sizes
w, h = 250, 250
sw, sh = 31, 23     # Size of empty space around sudoku puzzle
pp = 6  # problems per page
pr = 2  # problems per row

# Add an offset to accommodate the title
for index, filename in enumerate(files, 2):
    if index % pp == 0:
        # Create a new page
        pdf.add_page()
    #  Get the position on the page
    position = index % pp
    x = sw * (1 + position % pr) + w * (position % pr)
    y = sh * (1 + position//pr) + h * (position//pr)

    # Draw the puzzle number
    pdf.set_font('Arial', 'B', 15)
    pdf.set_xy(x-25, y)
    pdf.cell(25, 20, str(index-1), 1, 0, 'C')
    # Draw the sudoku
    pdf.image(filename, x, y, w, h, 'png')

""" Draw the sudoku solutions into the PDF 20 per page """
files = list(map(lambda fn: 'solutions/' + fn, sorted(os.listdir('solutions/'), key=lambda name: int(name.split('.')[0]))))
w, h = 138.5, 138.5
sw, sh = 10, 10
pp = 20  # problems per page
pr = 4  # problems per row
for index, filename in enumerate(files):
    if index % pp == 0:
        pdf.add_page()
        # Draw the title per page
        pdf.set_xy(0, 0)
        pdf.set_font('Arial', 'B', 40)
        pdf.cell(595, 90, "SOLUTIONS", 1, 0, 'C')
    #  Get the position on the page
    position = index % pp
    x = sw * (1 + position % pr) + w * (position % pr)
    # Add the offset to accommodate the title
    y = 90 + sh * (1 + position//pr) + h * (position//pr)
    # Draw the puzzle number
    pdf.set_font('Arial', '', 5)
    pdf.set_xy(x-10, y)
    pdf.cell(10, 10, str(index+1), 1, 0, 'C')
    # Draw the solution
    pdf.image(filename, x, y, w, h, 'png')

""" Save the pdf into the given output file """
pdf.output('output.pdf', dest='F')
